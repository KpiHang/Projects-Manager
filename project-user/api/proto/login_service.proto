// 使用 Protocol Buffers 的第三版语法
syntax = "proto3";

// 定义 Protobuf 文件的包名，用于组织和区分不同的 Protobuf 文件
package login.service.v1;

// 指定生成的 Go 代码的包路径；
option go_package = "project-user/pkg/service/login.service.v1";

// 定义一个消息类型 CaptchaMessage，用于请求验证码
message CaptchaMessage {
  // 字段 mobile，类型为字符串（string），字段编号为 1
  // 这个字段通常用于传递手机号
  string mobile = 1;
}

// 定义一个消息类型 CaptchaResponse，用于响应验证码请求
message CaptchaResponse {
  string code = 1;
}

// 定义一个消息类型 RegisterMessage，用于注册用户
message RegisterMessage {
  string mobile = 1;
  string name = 2;
  string password = 3;
  string captcha = 4;
  string email = 5;
}

message RegisterResponse{
}

message LoginMessage {
  string account = 1;
  string password = 2;
}
message LoginResponse{
  MemberMessage member = 1;
  repeated OrganizationMessage organizationList = 2; // 表示一个字段可以出现零次或多次。
  TokenMessage tokenList = 3;
}
message MemberMessage {
  int64 id = 1;
  string name = 2;
  string mobile = 3;
  string realname = 4;
  string account = 5;
  int32 status = 6;
  int64  lastLoginTime = 7;
  string address = 8;
  int32 province = 9;
  int32 city = 10;
  int32 area = 11;
  string email = 12;
  string code = 13;
}
message OrganizationMessage {
  int64 id = 1;
  string name = 2;
  string avatar = 3;
  string description = 4;
  int64 memberId = 5;
  int64 createTime = 6;
  int32 personal = 7;
  string address = 8;
  int32 province = 9;
  int32 city = 10;
  int32 area = 11;
  string code = 12;
}
message TokenMessage{
  string accessToken = 1;
  string refreshToken = 2;
  string tokenType = 3;
  int64 accessTokenExp = 4;
}

// 定义一个服务 LoginService，包含获取验证码的功能
service LoginService {
  // 定义一个远程过程调用（RPC）方法 GetCaptcha
  // 这个方法接收一个 CaptchaMessage 类型的请求，并返回一个 CaptchaResponse 类型的响应
  rpc GetCaptcha(CaptchaMessage) returns (CaptchaResponse) {}
  rpc Register(RegisterMessage) returns (RegisterResponse) {}
  rpc Login(LoginMessage) returns (LoginResponse) {}
}
